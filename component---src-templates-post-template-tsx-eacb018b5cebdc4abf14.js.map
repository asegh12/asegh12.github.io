{"version":3,"file":"component---src-templates-post-template-tsx-eacb018b5cebdc4abf14.js","mappings":"8NASA,IAAMA,GAAmB,cAAH,oBAAG,CAAH,sEAKhBC,GAAe,cAAH,oBAAG,CAAH,0DAKZC,GAAc,eAAH,oBAAG,CAAH,kFAMXC,GAAoB,eAAH,oBAAG,CAAH,8GA0BvB,EAlBmD,YAIhD,IAHDC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,oBACE,QAACN,EAAD,MACE,QAACC,EAAD,KAAeG,IACf,QAACF,EAAD,KAAcG,IAEfC,EAAWC,KAAI,SAAAC,GAAQ,OACtB,QAACL,EAAD,KAAoBK,QCtC5B,IAAMC,GAAmB,cAAH,oBAAG,CAAH,47BAgItB,EAJyD,YAAoB,IAARC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MCjI9D,IAaMG,GAAoB,cAAH,oBAAG,CAAH,qFAmCvB,EA5ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA7BM,gCA8BNC,KA7BO,4BA8BP,aAAc,QACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAkB,IAAhBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,MAG/BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KAEI,QAACL,EAAD,CAAmBsB,IAAKrB,KC3BjC,IAAMsB,GAAc,cAAH,mBAAG,CAAH,gFAOXC,GAAU,cAAH,mBAAG,CAAH,sDA4Cb,EAvC2D,YAKxD,IAHsBC,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAWIH,EAAM,GAVRK,KACEjC,EAFJ,EAEIA,KAFJ,IAGIkC,YACExC,EAJN,EAIMA,MACAyC,EALN,EAKMA,QACAxC,EANN,EAMMA,KACAC,EAPN,EAOMA,WAPN,EASIwC,gBAIJ,OACE,QAACC,EAAA,EAAD,CAAU3C,MAAOA,EAAO4C,YAAaH,EAASI,IAAKR,IACjD,QAACL,EAAD,MACE,QAACC,EAAD,MACE,QAAC,EAAD,CACEjC,MAAOA,EACPC,KAAMA,EACNC,WAAYA,KAGd,QAAC,EAAD,CAAaI,KAAMA,OAIvB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype PostHeadProps = {\n  title: string,\n  date: string,\n  categories: string[],\n}\n\nconst TitleDateWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst TitleWrapper = styled.div`\n  font-size: 40px;\n  font-weight: 900;\n`\n\nconst DateWrapper = styled.span`\n  font-size: 15px;\n  display: table-cell;\n  vertical-align: bottom;\n`\n\nconst CategoriesWrapper = styled.span`\n  font-size: 13px;\n  margin-right: 10px;\n  color: #e96900;\n  background-color: #f8f8f8;\n  padding: 3px;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <div>\n      <TitleDateWrapper>\n        <TitleWrapper>{title}</TitleWrapper>\n        <DateWrapper>{date}</DateWrapper>\n      </TitleDateWrapper>\n      {categories.map(category => (\n        <CategoriesWrapper>{category}</CategoriesWrapper>\n      ))}\n    </div>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  padding: 50px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 1024px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'asegh12/asegh12.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n};\n\nconst UtterancesWrapper = styled.div`\n  max-width: 100%;\n  @media (max-width: 1024px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'title',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent';\nimport CommentWidget from 'components/Post/CommentWidget';\nimport PostToc from 'components/Post/PostToc';\nimport styled from '@emotion/styled';\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostWrapper = styled.div`\n  width: 1024px;\n  height: auto;\n  margin: 0px auto;\n  display: flex;\n`\n\nconst Content = styled.div`\n  width: 768px;\n  margin: 0px 10px;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n      },\n      tableOfContents,\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href}>\n      <PostWrapper>\n        <Content>\n          <PostHead\n            title={title}\n            date={date}\n            categories={categories}\n          // thumbnail={gatsbyImageData}\n          />\n          <PostContent html={html} />\n        </Content>\n        {/* <PostToc toc={tableOfContents} /> */}\n      </PostWrapper>\n      <CommentWidget />\n    </Template>\n  )\n}\n\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n          tableOfContents\n        }\n      }\n    }\n  }\n`"],"names":["TitleDateWrapper","TitleWrapper","DateWrapper","CategoriesWrapper","title","date","categories","map","category","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","PostWrapper","Content","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","tableOfContents","Template","description","url"],"sourceRoot":""}